import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c as t,x as r}from"./vendor.7128caef.js";const c={},a={style:{display:"flex","flex-grow":"1",overflow:"hidden"}},d=r(`<div style="flex-grow:1;display:flex;flex-direction:column;"><div class="headline"><h1>ADD | QUERY HELP</h1></div><div style="display:flex;flex-direction:column;flex-wrap:wrap;justify-content:flex-start;align-content:flex-start;flex-grow:1;overflow-x:scroll;"><div class="card help-card"><h2>It&#39;s like Google</h2><div class="card-content"><pre><code>modelling</code></pre> \u{1F449}\u{1F3FF} articles whose text contains &quot;modelling&quot;. </div></div><div class="card help-card"><h2>Multiple terms</h2><div class="card-content"> By default, all terms are optional, as long as one term matches. <pre><code>ai algorithms</code></pre> \u{1F449}\u{1F3FF} searches for &quot;ai&quot; <strong>or</strong> &quot;algorithms&quot;. </div></div><div class="card help-card"><h2>Quotes</h2><div class="card-content"> Use quotes to search full expressions. <pre><code>&quot;parallel genetic algorithm&quot;</code></pre> \u{1F449}\u{1F3FF} articles containing &quot;parallel genetic algorithm&quot;, and not just one of the words. </div></div><div class="card help-card"><h2>Boosting ^</h2><div class="card-content"><pre><code>ai^3 algorithm</code></pre> \u{1F449}\u{1F3FF} &quot;ai&quot; counts triple for relevance (for ordering the results). </div></div><div class="card help-card"><h2>OR, AND, NOT, ( )</h2><div class="card-content"> You <em>must</em> use parentheses to specify priority. <pre><code>(modeling OR modelling) AND NOT ai</code></pre></div></div><div class="card help-card"><h2>Must be present / absent</h2><div class="card-content"> You can also specify that a term must be present (+) or absent (-). <pre><code>-artificial +intelligence</code></pre> \u{1F449}\u{1F3FF} articles with &quot;intelligence&quot; but not &quot;artificial&quot; <br><br><pre><code>modeling modelling +ai -robot</code></pre> \u{1F449}\u{1F3FF} &quot;ai&quot; must be present; &quot;robot&quot; must be absent; &quot;modeling&quot; and &quot;modelling&quot; <em>may</em> be present: it increases the relevance of the article. </div></div><div class="card help-card"><h2>Wildcards</h2><div class="card-content"> Search for one (?) or any number (*) of characters. <pre><code>algorit*</code></pre> \u{1F449}\u{1F3FF} Any word starting with &quot;algorit&quot; <br><br><pre><code>model?ing</code></pre> \u{1F449}\u{1F3FF} Finds &quot;modeling&quot; as well as &quot;modelling&quot; </div></div><div class="card help-card"><h2>Field search</h2><div class="card-content"> You can search in specific fields. <pre><code>coredata.dc\\:description:(ai AND bot)</code></pre> \u{1F449}\u{1F3FF} &quot;ai&quot; and &quot;bot&quot; in the description (the field is &quot;coredata.dc\\:description&quot;). <br><br><pre><code>coredata.prism\\:coverDate:2018-08-10</code></pre> \u{1F449}\u{1F3FF} articles published the 2018-08-10 (the date field is &quot;coredata.prism\\:coverDate&quot;). </div></div><div class="card help-card"><h2>Range</h2><div class="card-content"><pre><code>coredata.prism\\:coverDate:
[2018-01-01 TO 2018-01-31]</code></pre> \u{1F449}\u{1F3FF} All articles from January 2018 (the date field is &quot;coredata.prism\\:coverDate&quot;). </div></div><div class="card help-card"><h2>Useful fields</h2><div class="card-content"><p><code>coredeata.prism\\:coverDate</code><br>Publication date. Ex: &quot;2021-06-09&quot; </p><p><code>coredata.prism\\:publicationName</code><br>Journal name. Ex: &quot;Engineering Structures&quot;</p><p><code>coredata.citedby-count</code><br>Number of citations.</p><p><code>coredata.dc\\:title</code><br>Title.</p><code>coredata.openaccessFlag</code><br>Open access or not: &quot;true&quot; or &quot;false&quot;. </div></div></div></div>`,1),i=[d];function s(l,n){return o(),t("main",a,i)}var h=e(c,[["render",s]]);export{h as default};
